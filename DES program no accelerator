#include <stdio.h>
//#include <time.h>
#define LEFT 1
#define RIGHT 0


int Get_bit(unsigned long long int data, int place, int length);
unsigned long long int IP(unsigned long long int data);
unsigned long long int Inv_IP(unsigned long long int data);
unsigned long long int Expansion(unsigned long long int  data);
unsigned long long int Permutation(unsigned long long data);
unsigned long long int PC_1(unsigned long long int data, int dir);
unsigned long long int PC_2(unsigned long long int data);
unsigned long long int Cyc_shift(unsigned long long int data);
void Key_exp(unsigned long long int exp_keys[], unsigned long long int key);
unsigned long long int Subbox(unsigned long long int data);
unsigned long long int Encrypt(unsigned long long data, unsigned long long int key);
unsigned long long int Decrypt(unsigned long long data, unsigned long long int key);

int main(int argc, char* argv[])
{
	unsigned long long int key = 0x0123456789ABCDEF;
	unsigned long long int msg = 0x666F7220616C6C20;
	unsigned long long int a=0;
	unsigned long long int b = 0;
	a = Encrypt(msg, key);
	b = Decrypt(a, key);
	printf(" encrypted message is %llx\n",a);
	printf(" decrypted message is %llx\n", b);

	/*
		clock_t start, end;
	printf("%llx\n", Subbox(key));

	start = clock();
	while (i < 10) {
	a = Encrypt(msg, key);
	i++;
	}
	
	end = clock();
	printf("%d %d\n", end, start);

	double duration = ((double)end - start) / CLOCKS_PER_SEC;
	printf("Time taken to execute in seconds : %f\n", duration);
	
	

	printf("Encrypted msg is %llx\n", a);
	a = Decrypt(a, key);
	printf("\n");
	printf("Decrypted msg is %llx\n", a);*/
	return 0;
}

int Get_bit(unsigned long long int data, int place, int length)
{
	// This function gets the bit number "place" (starting from the left with a value of one) from a "length" sized number 
	unsigned long long int mask = 1 ;
	mask = mask << (length-place); // Sets mask for the required bit
	mask = mask & data;
	mask = mask >>( length - place);
	return mask;
	/*
	unsigned long long int temp = 0;
	temp = data << place - 1;
	temp = temp >> place - 1;
	temp = temp >> 64 - place;	
	return temp;*/
}

unsigned long long int IP(unsigned long long int data)
{
	unsigned long long int result = 0;
	int i = 0;
	char perm_table[64] = {58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7};
	unsigned long long int temp = 0;
	for ( i=0; i<64; i++)
	{
		
		result = result << 1;
		temp = Get_bit(data,perm_table[i],64);
		result += temp;
	}
	return result;
}


unsigned long long int Inv_IP(unsigned long long int data)
{
	unsigned long long int result = 0;
	int i = 0;
	char perm_table[64] = { 40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25 };
	unsigned long long int temp = 0;
	for (i = 0; i < 64; i++)
	{
		result = result << 1;
		temp = Get_bit(data,perm_table[i],64);
		result += temp;
	}
	return result;
}

unsigned long long int Expansion(unsigned long long int data)
{

	unsigned long long int result = 0;
	int perm_table[48] = { 32,1,2,3,4,5,
							4,5,6,7,8,9,
							8,9,10,11,12,13,
							12,13,14,15,16,17,
							16,17,18,19,20,21,
							20,21,22,23,24,25,
							24,25,26,27,28,29,
							28,29,30,31,32,1 };
	int i = 0;
	for(i=0;i<48;i++)
	{
		result=result << 1;
		result += Get_bit(data, perm_table[i],32);
	}
	return result;
}

unsigned long long int Permutation(unsigned long long data)
{
	unsigned long long int result = 0;
	int perm_table[32] = { 16,7,20,21,
						   29,12,28,17,
						   1,15,23,26,
						   5,18,31,10,
						   2,8,24,14,
					       32,27,3,9,
						   19,13,30,6,
						   22,11,4,25};
	int i = 0;
	for (i = 0; i < 32; i++)
	{
		result = result << 1;
		result += Get_bit(data, perm_table[i] , 32);
	}
	return result;
}

unsigned long long int PC_1(unsigned long long int data, int dir)
{
	unsigned long long int result = 0;
	int right_table[28] = { 63,55,47,39,31,23,15,
							7,62,54,46,38,30,22,
							14,6,61,53,45,37,29,
							21,13,5,28,20,12,4 };

	int left_table[28] = {57,49,41,33,25,17,9,
						  1,58,50,42,34,26,18,
						  10,2,59,51,43,35,27,
						  19,11,3,60,52,44,36};
	int i = 0;
	for (i = 0; i < 28; i++)
	{
		result = result << 1;
		if (dir == RIGHT)
			result += Get_bit(data, right_table[i],64);
		else
			result += Get_bit(data, left_table[i],64);
	}
	return result;
}

unsigned long long int PC_2(unsigned long long int data)
{
	unsigned long long int result = 0;
	int i = 0;
	char perm_table[48] = { 14,17,11,24,1,5,3,28,
							15,6,21,10,23,19,12,4,
							26,8,16,7,27,20,13,2,
							41,52,31,37,47,55,30,40,
							51,45,33,48,44,49,39,56,
							34,53,46,42,50,36,29,32 };
	unsigned long long int temp = 0;
	for (i = 0; i < 48; i++)
	{
		result = result << 1;
		temp = Get_bit(data, perm_table[i],56);
		result += temp;
	}
	//printf("%llx\n",result);
	return result;
}

unsigned long long int Cyc_shift(unsigned long long int data)
{
	//This function executes a cyclical shift function on a 28 bit sized input 
	unsigned long long int result = 0;
	unsigned long long int left_bit = Get_bit(data,1,28);
	result = data - (left_bit<<27);
	result = (result << 1) + left_bit;
	return result;
	/*
	unsigned long long int result = 0;
	result = data << 37;
	result = result >> 36;
	result += data >> 27;
	return result;*/
}


void Key_exp(unsigned long long int exp_keys[], unsigned long long int key)
{
	int v[16];
	int i = 0;
	unsigned long long int C = 0, D = 0;
	for (i = 0; i < 16; i++)
	{
		if (i == 0 || i == 1 || i == 8 || i == 15)
			v[i] = 1;
		else
			v[i] = 2;
	}
	C = PC_1(key, LEFT);
	D = PC_1(key, RIGHT);
	for (i = 0; i < 16; i++)
	{
		if (v[i] == 2)
		{
			C = Cyc_shift(Cyc_shift(C));
			D = Cyc_shift(Cyc_shift(D));
		}
		else
		{
			C = Cyc_shift(C);
			D = Cyc_shift(D);
		}
		exp_keys[i] = PC_2(D + (C << 28));
	}


}


unsigned long long int Subbox(unsigned long long int data)
{
	unsigned char split_data[8];
	int i = 0;
	unsigned long long int result = 0, temp = data;
	int sub_box[8][4][16] = { 14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,
				0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,
				4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,
				15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13,
				15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,
				3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,
				0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,
				13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9,
				10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,
				13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,
				13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,
				1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12,
				7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,
				13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,
				10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,
				3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14,
				2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,
				14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,
				4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,
				11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3,
				12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,
				10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,
				9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,
				4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13,
				4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,
				13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,
				1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,
				6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12,
				13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,
				1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,
				7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,
				2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11 };
	for(i=7;i>=0;i--)
	{
		// This loop splits a 48 bit sized variable to 8 six bit sized variables
		split_data[i] = temp % 64;
		temp = temp >> 6;
	}

	for (i = 0; i < 8; i++)
	{
		result = result << 4;
		split_data[i] = sub_box[i][2 * (split_data[i] >> 5) + split_data[i]%2] [(split_data[i]%32)>>1] ;
		//In the above row the select a value from a 3-d array. The row is selected based on the msb and lsb and the column is based on the middle 4 bits  
		result += split_data[i];
	}
	return result;
}
unsigned long long int Encrypt(unsigned long long data, unsigned long long int key)
{
	unsigned long long int exp_keys[16];
	int i = 0;
	unsigned long long int right = 0, left = 0, temp = 0,result=0;
	Key_exp(exp_keys, key);
	temp = IP(data);
	left = temp >> 32;
	right = temp&0x00000000FFFFFFFF;
	for(i=0;i<16;i++)
	{
		temp = left;
		left = right;
		right = temp ^ Permutation(Subbox(Expansion(right)^exp_keys[i]));
		//printf("%llx %llx\n", left, right);
	}
	result = (right << 32) + left;
	result = Inv_IP(result);
	return result;
}

unsigned long long int Decrypt(unsigned long long data, unsigned long long int key)
{
	unsigned long long int exp_keys[16];
	int i = 0;
	unsigned long long int right = 0, left = 0, temp = 0, result = 0;
	Key_exp(exp_keys, key);
	temp = IP(data);
	right = temp >> 32;
	left = temp & 0x00000000FFFFFFFF;
	for (i = 15; i>=0; i--)
	{
		temp = right;
		right = left;
		left = temp ^ Permutation(Subbox(Expansion(left) ^ exp_keys[i]));
		//printf("%llx %llx\n",left,right);
	}
	result = (left << 32) + right;
	result = Inv_IP(result);
	return result;
}
